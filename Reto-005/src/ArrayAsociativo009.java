import java.util.*;

public class ArrayAsociativo009 {

    static final int FILA = 0;
    static final int COLUMNA = 1;

    static final int ARRIBA = 0;
    static final int ABAJO = 1;
    static final int IZQUIERDA = 2;
    static final int DERECHA = 3;
    static final int SALIR = 4;
    static final int CAMBIA_VISUALIZACION = 5;
    static final int AUTORESOLUCUION = 6;
    static final int NADA = 999;

    static final int VISUALIZACION_NORMAL = 0;
    static final int VISUALIZACION_SIN_COLOR = 1;
    static final int VISUALIZACION_RAW = 2;
    static final int VISUALIZACION_COLISIONES = 3;

    static final int[][] MOVIMIENTO = {
            {-1, 0},
            {1, 0},
            {0, -1},
            {0, 1}
    };
    static int filaDestino = 39;
    static int columnaDestino = 70;
    static double hora = 9.0;
    static int alcanceVision;
    static int viewPort;
    static int modoVisualizacion = VISUALIZACION_NORMAL;

    static int minFila, minColumna, maxFila, maxColumna;

    static boolean jugando = true;
    public static String[] dosCastillos = {
            "............................................................................................................................................................",
            "............................................................................................................................................................",
            "..............................................................................                                                                              ",
            "..............................................................................                                                                              ",
            "..............................................................................                                                                              ",
            "..............................................................................                                                                              ",
            "..............................................................................                                                                              ",
            "..............................................................................                                                                              ",
            "..............................................................................                                                                              ",
            "..............                                                   .............                                                                              ",
            "............                                                       ...........                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            "...........                                                         ..........                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            "..........      ..................................                   .........                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            "..........    .....................................          ....    .........                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            ".........    .......................................        ......    ........                              |----------------|%%%%%%%%%%%%%%%%%%%%%%%       ",
            ".........    ..|-----|..........|-------------|.....    .|-----|..    ........                              |   ###%%%%###   |%%%%%%%%%%%%%%%%%%%%%%%       ",
            ".........   ...|::+::|..........O+++++++++++++|....    ..|::+::|...   ........                              |   ##      ##   |%%%%%%%%%%%%%%%%%%%%%%%       ",
            ".........   ...|:+++:|..........|+++++++++++++|...    ...|:+++:|...   ........                    |------|  |   #  ****  #   |%%%%%%%%%%%%%%%%%%%%%%%       ",
            ".........   ...|+++++------------++|-------|++------------+++++|...   ........                    |******|  |     #****#     |%%%%%%%%%%%%%%%%%%%%%%%       ",
            ".........   ...|:++++++++++++++++++|#######|++++++++++++++++++:|...   ........       |--------|----******---|     #****#     |---------###%%%%%%%%%%%       ",
            ".........   ...|::+++++++++++++++++|::###::|+++++++++++++++++::|...   ........       |===*****|******||*****|     #****#     |%%%*****O**#%%%%%%%%%%%       ",
            ".........   ...---|++|-------|-+++-|:*#*#*:|-----|---|---|++|---...   ........       |+===****|XX****||*****|    ###**###    |%%******|**#%%%%%%%%%%%       ",
            ".........   ......|++|---O---|+++++|*******|#####|+++-$$$|++|......   ........       |++|------XX|-----O-|**|    #%%**%%#    |%**|-----###%%%%%%%%%%%       ",
            ".........   ......|++|*#***#*|+++++|*******|#####-+++O*$$|++|......   ........       |++|******XX|*******|**|    #%%**%%#    |%****|%%%%%%%%%%%%%%%%%       ",
            ".........    .....|++|*#***#*|+++++|*******|+++++X+++|**$|++|......   ........       |++|********|*******|**|    #%%**%%#    |*****|%%%%%%%%%%%%%%%%%       ",
            ".........    .....|++|*#####*|+++++O*******|+++++X+++|---|++|......   ........       |++|-**------**-|---|**|    ###**###    |*****|%%%%%%%%%%%%%%%%%       ",
            ".........     ....|++|*******|--+--|--***--|+++++X+++-**$|++|......   ........       |++|#**#%%%%#**#|%%%|**-------****-------**|**|%%%%%%%%%%%%%%%%%       ",
            ".........      ...|++|--***--|+++++|::+++::|+++++|+++O*$$|++|......   ........       |++|%**%%%%%%***|%%%|**********************|**|%%%%%%%%%%%%%%%%%       ",
            ".........       ..|++|+++++++|+++++|:+++++:|+++++|+++|$$$|++|......   ........       |++|%**%|-|%%***|%%%|**********************|XX|%%%%%%%%%%%%%%%%%       ",
            "..........      ..|++|+##+##+|------+++++++--+++|---|----|++|......   ........       |++|**%%|-|%%#**|%%=|-------------|--|-----|XX---|%%%%%%%%%%%%%%       ",
            "...........      .|++|+++++++|++++++++++++++++++|***|**#*|++|......   ........       |++|***%---%%***|%==|    *****    |**|=%%%%|XX***|%%%%%%%%%%%%%%       ",
            "...........       |++|+##+##+|++++++++++++++++++|---|**##|++|......   ........       |++|*#*%***%***%|===|             |**|==%%%|*****-----------|--|       ",
            "............      |++|+++++++|++++++++++++++++++|********|++|......   ........       |++|%*********#%|===|     ***     |**|===|---||***%#%#%#%-**|%%|       ",
            "............      |++|+##+##+--++|----+++----|++|***|****|++|......   ........       |++|%%*|***|*%%%|+==|    *+++*    |**|===||++||**********O**O*%|       ",
            "...........      .|++|+++++++++++|:::+++++:::|++-------**|++|......   ........       |++|%%%|***|%%%%|++=|    **+***   --O|=+=||++|-***%#%#%#%-**|%%|       ",
            "...........     ..|++|++++++++++:|::+++++++::|+++++++++++|++|......   ........       |++-----***------+++|    |#+#|*    **|+++||++|***|----------|%%|       ",
            "..........      ..|++|-------|+::|:+++++++++:|+++++++++++|++|......   ........       |++++++++++++++XX+++|    |+++|*******|+++--++|***-******%%%%|%%|       ",
            "..........     ...|++|*******|----++++   ++++-------|----|++|......   ........       |++++++++++++++XX+++------#+#---------+++XX++|***********%%%|%%|       ",
            ".........      ...|++|**|---*|+++++++     ++++++++++|++++|++|......   ........       --------|-------|+++++++#=+++=#++++++++++XX++|***********%%%|%%|       ",
            ".........     ....|++|**|*#**|+++++++     ++++++++++O++++|++|......   ........               |%%%%%%||++++++++++++++++++++++++|--------**%%***%%%|%%|       ",
            ".........     ....|++|**|*#**|+++++++     ++++++++++|++++|++|......   ........          |-----%%%%%%||++++++++++++++++++++++++|++++++++%%%%%***%%|%%|       ",
            ".........    .....|++|**--|**|++++++++   ++++|-------++++|++|......   ........          |*%%%%%%||%%|------------------***----|+++++++%%%%%%***%*|%%|       ",
            ".........    .....|++|****|**|++++++++++++++:|+++++++++++|++|......   ........          |**%%*%%||%%|                ##***#   |++--|-|%%%%%%%*****%%|       ",
            ".........   ......|++|--**----+++++++++++++::|+-+++++++++|++|......   ........          |%*|-O------|               #*****#   |++++|||%%%%%%***%***%|       ",
            ".........   ......|++|++++++++++++++++++++:::|+++++++++++|++|......   ........          |**|%*%%%%%%|               #****#    |++++|||+%%%%%**%%%|---       ",
            ".........   ......|++|-------------|--+++--|----|+++|----|++|......   ........          |**|%%%%%%%%|              #***##     |-|++|||++|---++|---          ",
            ".........   ......|++|XXXXXXXXXXXXX|::+++::|#***|+++|***#|++|......   ........          |*%------|%%|------|    |---***---|   |--++|--++|+++++|             ",
            ".........   ......|++|X+++++++++++X| :+++: |****|+++|****|++|......   ........          |%%%***%%|%%|******|    |**%******|   |++++|++++|+++++|             ",
            ".........   ......|++|X++XXXXXXXX+X|  +++  |--O--+++--O--|++|......   ........          |%%%%***%|%%-******|    |*%%%**%**|   |++++|++++|++|---             ",
            ".........   ......|++|X++|-----|X+X|  +++  |+++++++++++++|++|......   ........          ------|**|%%%%*||**-####-%%%|-|%%*-###-++|-|++---++|                ",
            ".........   ......|++|X++|%%%%%|X+X| :+++: |--O-|+++|-O--|++|......   ........                |*%|%%***||********%%%|-|%%%*****++|||+++++++|                ",
            ".........   ......|++|X++|*****|X+X|::+++::|****|+++|****|++|......   ........                |%%---|---|*******%%%%---%%******++|||+++++++|                ",
            ".........   ......|++|X++|#####|X+X| :+++: |#***|+++|***#|++|......   ........                |%%%**|----**|####|%%%%*%%%%|###|++----|++|---                ",
            ".........   ......|++|X++|*****|X+X|  +++  |-----+++-----|++|......   ........                |%%%%*|******|    |%%%***%%%|   |+++++||++|                   ",
            ".........   ......|++|X++----**|X+X|  +++  |X+++++++++++%|++|......   ........                ---|**|%*****|    |%%*****%%|   |+++++||++|                   ",
            ".........   ......|++|X++++++++|X+X|  +++  |XX+++++++++%%|++|......   ........                   |*%|%%|----    ---|***|---   ---|++--++|                   ",
            ".........   ......|++|XXXXXXXXX|X+X| :+++: |XXX+++++++%%%|++|......   ........                   |%%|%%|           |***|         |++++++|                   ",
            ".........   ...|---++-----------X+X|::+++::|XXXX+++++%%%%|XX---|...   ........                   |%%-%%|           |***|         |++++++|                   ",
            ".........   ...|::++++++++++++++++X| :+++: |XXXXX+++%%%%%|***$$|...   ........                   |%%%%%|          #|***|#        --------                   ",
            ".........   ...|:+++++++++++++++++X|  +++  |#############|****$|...   ........                   |%%%%%|          #|***|#                                   ",
            ".........   ...|+++++|-------------|  +++  |-------------|*****|...   ........                   -------            +++                                     ",
            ".........   ...|:+++:|.............| :+++: |.............|$***$|...   ........                                      +++                                     ",
            ".........   ...|::+::|.............|::+++::|.............|$$*$$|...   ........                                      +++                                     ",
            ".........    ..-------.............---+++---.............-------..    ........                                      +++                                     ",
            ".........    .....................................................    ........                                      +++                                     ",
            "..........    ...................................................    .........                                      +++                                     ",
            "..........      ......................+++......................      .........                                      +++                                     ",
            "...........                           +++                           ..........                                      +++                                     ",
            "............                          +++                          ...........                                      +++                                     ",
            "..............                        +++                        .............                                      +++                                     ",
            "......................................+++.....................................                                      +++                                     ",
            "..............................................................................                                      +++                                     ",
            "..............................................................................                                      +++                                     ",
            "..............................................................................                                      +++                                     ",
            "..............................................................................                                      +++                                     ",
            "..............................................................................                                      +++                                     ",
            "..............................................................................                                      +++                                     ",
            "............................................................................................................................................................"
    };

    public static String[] castilloLB = {
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............                                                   .............",
            "............                                                       ...........",
            "...........                                                         ..........",
            "..........      ..................................                   .........",
            "..........    .....................................          ....    .........",
            ".........    .......................................        ......    ........",
            ".........    ..|-----|..........|-------------|.....    .|-----|..    ........",
            ".........   ...|::+::|..........O+++++++++++++|....    ..|::+::|...   ........",
            ".........   ...|:+++:|..........|+++++++++++++|...    ...|:+++:|...   ........",
            ".........   ...|+++++------------++|-------|++------------+++++|...   ........",
            ".........   ...|:++++++++++++++++++|#######|++++++++++++++++++:|...   ........",
            ".........   ...|::+++++++++++++++++|::###::|+++++++++++++++++::|...   ........",
            ".........   ...---|++|-------|-+++-|:*#*#*:|-----|---|---|++|---...   ........",
            ".........   ......|++|---O---|+++++|*******|#####|+++-$$$|++|......   ........",
            ".........   ......|++|*#***#*|+++++|*******|#####-+++O*$$|++|......   ........",
            ".........    .....|++|*#***#*|+++++|*******|+++++X+++|**$|++|......   ........",
            ".........    .....|++|*#####*|+++++O*******|+++++X+++|---|++|......   ........",
            ".........     ....|++|*******|--+--|--***--|+++++X+++-**$|++|......   ........",
            ".........      ...|++|--***--|+++++|::+++::|+++++|+++O*$$|++|......   ........",
            ".........       ..|++|+++++++|+++++|:+++++:|+++++|+++|$$$|++|......   ........",
            "..........      ..|++|+##+##+|------+++++++--+++|---|----|++|......   ........",
            "...........      .|++|+++++++|++++++++++++++++++|***|**#*|++|......   ........",
            "...........       |++|+##+##+|++++++++++++++++++|---|**##|++|......   ........",
            "............      |++|+++++++|++++++++++++++++++|********|++|......   ........",
            "............      |++|+##+##+--++|----+++----|++|***|****|++|......   ........",
            "...........      .|++|+++++++++++|:::+++++:::|++-------**|++|......   ........",
            "...........     ..|++|++++++++++:|::+++++++::|+++++++++++|++|......   ........",
            "..........      ..|++|-------|+::|:+++++++++:|+++++++++++|++|......   ........",
            "..........     ...|++|*******|----++++   ++++-------|----|++|......   ........",
            ".........      ...|++|**|---*|+++++++     ++++++++++|++++|++|......   ........",
            ".........     ....|++|**|*#**|+++++++     ++++++++++O++++|++|......   ........",
            ".........     ....|++|**|*#**|+++++++     ++++++++++|++++|++|......   ........",
            ".........    .....|++|**--|**|++++++++   ++++|-------++++|++|......   ........",
            ".........    .....|++|****|**|++++++++++++++:|+++++++++++|++|......   ........",
            ".........   ......|++|--**----+++++++++++++::|+-+++++++++|++|......   ........",
            ".........   ......|++|++++++++++++++++++++:::|+++++++++++|++|......   ........",
            ".........   ......|++|-------------|--+++--|----|+++|----|++|......   ........",
            ".........   ......|++|XXXXXXXXXXXXX|::+++::|#***|+++|***#|++|......   ........",
            ".........   ......|++|X+++++++++++X| :+++: |****|+++|****|++|......   ........",
            ".........   ......|++|X++XXXXXXXX+X|  +++  |--O--+++--O--|++|......   ........",
            ".........   ......|++|X++|-----|X+X|  +++  |+++++++++++++|++|......   ........",
            ".........   ......|++|X++|%%%%%|X+X| :+++: |--O-|+++|-O--|++|......   ........",
            ".........   ......|++|X++|*****|X+X|::+++::|****|+++|****|++|......   ........",
            ".........   ......|++|X++|#####|X+X| :+++: |#***|+++|***#|++|......   ........",
            ".........   ......|++|X++|*****|X+X|  +++  |-----+++-----|++|......   ........",
            ".........   ......|++|X++----**|X+X|  +++  |X+++++++++++%|++|......   ........",
            ".........   ......|++|X++++++++|X+X|  +++  |XX+++++++++%%|++|......   ........",
            ".........   ......|++|XXXXXXXXX|X+X| :+++: |XXX+++++++%%%|++|......   ........",
            ".........   ...|---++-----------X+X|::+++::|XXXX+++++%%%%|XX---|...   ........",
            ".........   ...|::++++++++++++++++X| :+++: |XXXXX+++%%%%%|***$$|...   ........",
            ".........   ...|:+++++++++++++++++X|  +++  |#############|****$|...   ........",
            ".........   ...|+++++|-------------|  +++  |-------------|*****|...   ........",
            ".........   ...|:+++:|.............| :+++: |.............|$***$|...   ........",
            ".........   ...|::+::|.............|::+++::|.............|$$*$$|...   ........",
            ".........    ..-------.............---+++---.............-------..    ........",
            ".........    .....................................................    ........",
            "..........    ...................................................    .........",
            "..........      ......................+++......................      .........",
            "...........                           +++                           ..........",
            "............                          +++                          ...........",
            "..............                        +++                        .............",
            "......................................+++.....................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            "..............................................................................",
            ".............................................................................."
    };
    public static String[] castilloEX = {
            "                                                                              ",
            "                                                                              ",
            "                                                                              ",
            "                                                                              ",
            "                                                                              ",
            "                                                                              ",
            "                                                                              ",
            "                                                                              ",
            "                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            "                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            "                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            "                                                 %%%%%%%%%%%%%%%%%%%%%%       ",
            "                              |----------------|%%%%%%%%%%%%%%%%%%%%%%%       ",
            "                              |   ###%%%%###   |%%%%%%%%%%%%%%%%%%%%%%%       ",
            "                              |   ##      ##   |%%%%%%%%%%%%%%%%%%%%%%%       ",
            "                    |------|  |   #  ****  #   |%%%%%%%%%%%%%%%%%%%%%%%       ",
            "                    |******|  |     #****#     |%%%%%%%%%%%%%%%%%%%%%%%       ",
            "       |--------|----******---|     #****#     |---------###%%%%%%%%%%%       ",
            "       |===*****|******||*****|     #****#     |%%%*****O**#%%%%%%%%%%%       ",
            "       |+===****|XX****||*****|    ###**###    |%%******|**#%%%%%%%%%%%       ",
            "       |++|------XX|-----O-|**|    #%%**%%#    |%**|-----###%%%%%%%%%%%       ",
            "       |++|******XX|*******|**|    #%%**%%#    |%****|%%%%%%%%%%%%%%%%%       ",
            "       |++|********|*******|**|    #%%**%%#    |*****|%%%%%%%%%%%%%%%%%       ",
            "       |++|-**------**-|---|**|    ###**###    |*****|%%%%%%%%%%%%%%%%%       ",
            "       |++|#**#%%%%#**#|%%%|**-------****-------**|**|%%%%%%%%%%%%%%%%%       ",
            "       |++|%**%%%%%%***|%%%|**********************|**|%%%%%%%%%%%%%%%%%       ",
            "       |++|%**%|-|%%***|%%%|**********************|XX|%%%%%%%%%%%%%%%%%       ",
            "       |++|**%%|-|%%#**|%%=|-------------|--|-----|XX---|%%%%%%%%%%%%%%       ",
            "       |++|***%---%%***|%==|    *****    |**|=%%%%|XX***|%%%%%%%%%%%%%%       ",
            "       |++|*#*%***%***%|===|             |**|==%%%|*****-----------|--|       ",
            "       |++|%*********#%|===|     ***     |**|===|---||***%#%#%#%-**|%%|       ",
            "       |++|%%*|***|*%%%|+==|    *+++*    |**|===||++||**********O**O*%|       ",
            "       |++|%%%|***|%%%%|++=|    **+***   --O|=+=||++|-***%#%#%#%-**|%%|       ",
            "       |++-----***------+++|    |#+#|*    **|+++||++|***|----------|%%|       ",
            "       |++++++++++++++XX+++|    |+++|*******|+++--++|***-******%%%%|%%|       ",
            "       |++++++++++++++XX+++------#+#---------+++XX++|***********%%%|%%|       ",
            "       --------|-------|+++++++#=+++=#++++++++++XX++|***********%%%|%%|       ",
            "               |%%%%%%||++++++++++++++++++++++++|--------**%%***%%%|%%|       ",
            "          |-----%%%%%%||++++++++++++++++++++++++|++++++++%%%%%***%%|%%|       ",
            "          |*%%%%%%||%%|------------------***----|+++++++%%%%%%***%*|%%|       ",
            "          |**%%*%%||%%|                ##***#   |++--|-|%%%%%%%*****%%|       ",
            "          |%*|-O------|               #*****#   |++++|||%%%%%%***%***%|       ",
            "          |**|%*%%%%%%|               #****#    |++++|||+%%%%%**%%%|---       ",
            "          |**|%%%%%%%%|              #***##     |-|++|||++|---++|---          ",
            "          |*%------|%%|------|    |---***---|   |--++|--++|+++++|             ",
            "          |%%%***%%|%%|******|    |**%******|   |++++|++++|+++++|             ",
            "          |%%%%***%|%%-******|    |*%%%**%**|   |++++|++++|++|---             ",
            "          ------|**|%%%%*||**-####-%%%|-|%%*-###-++|-|++---++|                ",
            "                |*%|%%***||********%%%|-|%%%*****++|||+++++++|                ",
            "                |%%---|---|*******%%%%---%%******++|||+++++++|                ",
            "                |%%%**|----**|####|%%%%*%%%%|###|++----|++|---                ",
            "                |%%%%*|******|    |%%%***%%%|   |+++++||++|                   ",
            "                ---|**|%*****|    |%%*****%%|   |+++++||++|                   ",
            "                   |*%|%%|----    ---|***|---   ---|++--++|                   ",
            "                   |%%|%%|           |***|         |++++++|                   ",
            "                   |%%-%%|           |***|         |++++++|                   ",
            "                   |%%%%%|          #|***|#        --------                   ",
            "                   |%%%%%|          #|***|#                                   ",
            "                   -------            +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     ",
            "                                      +++                                     "
    };


    public static void main(String[] args) {

        int filaInicio = 31;
        int columnaInicio = 33;
        int filaDestino = 79;  // Ajusta estos valores según las coordenadas correctas
        int columnaDestino = 79;

        // Imprimir las coordenadas de inicio y destino
        System.out.println("Coordenadas de inicio: (" + filaInicio + ", " + columnaInicio + ")");
        System.out.println("Coordenadas de destino: (" + filaDestino + ", " + columnaDestino + ")");

        // Resolver laberinto y obtener el camino
        List<int[]> camino = resolverLaberinto(convertirMapaACeldas(castilloLB), filaInicio, columnaInicio, filaDestino, columnaDestino);

        // Imprimir el camino encontrado o un mensaje si no se encontró
        if (camino != null) {
            System.out.println("Se encontró un camino hacia el destino:");
            for (int[] posicion : camino) {
                System.out.println("(" + posicion[0] + ", " + posicion[1] + ")");
            }
        } else {
            System.out.println("No se encontró un camino hacia el destino.");
        }
        int[] elPersonaje = {31, 33};

        inicializarMundo(castilloLB);

        do {
            actualizarTiempo();
            imprimirMundo(castilloLB, elPersonaje);
            verAccion(elPersonaje, castilloLB);

        } while (jugando);

    }

    static List<int[]> resolverLaberinto(int[][] laberinto, int filaInicio, int columnaInicio, int filaDestino, int columnaDestino) {
        // Definir una lista para almacenar el camino
        List<int[]> camino = new ArrayList<>();

        // Definir una matriz para marcar celdas visitadas
        boolean[][] visitado = new boolean[laberinto.length][laberinto[0].length];

        // Llamar al método auxiliar que realiza la búsqueda
        resolverLaberintoAux(laberinto, filaInicio, columnaInicio, filaDestino, columnaDestino, visitado, camino);

        // Retornar el camino encontrado
        return camino;
    }

    // Método auxiliar para la búsqueda utilizando DFS
    static boolean resolverLaberintoAux(int[][] laberinto, int filaActual, int columnaActual, int filaDestino, int columnaDestino, boolean[][] visitado, List<int[]> camino) {
        // Verificar si la posición actual es la posición de destino
        if (filaActual == filaDestino && columnaActual == columnaDestino) {
            camino.add(new int[]{filaActual, columnaActual});
            return true;
        }

        // Verificar si la posición actual es válida y no ha sido visitada
        if (filaActual >= 0 && filaActual < laberinto.length && columnaActual >= 0 && columnaActual < laberinto[0].length && laberinto[filaActual][columnaActual] == 0 && !visitado[filaActual][columnaActual]) {
            // Marcar la celda actual como visitada
            visitado[filaActual][columnaActual] = true;

            // Agregar la posición actual al camino
            camino.add(new int[]{filaActual, columnaActual});

            // Explorar en las cuatro direcciones posibles (arriba, abajo, izquierda, derecha)
            if (resolverLaberintoAux(laberinto, filaActual - 1, columnaActual, filaDestino, columnaDestino, visitado, camino)) {
                return true;  // Si se encontró el destino, retornar true
            }
            if (resolverLaberintoAux(laberinto, filaActual + 1, columnaActual, filaDestino, columnaDestino, visitado, camino)) {
                return true;
            }
            if (resolverLaberintoAux(laberinto, filaActual, columnaActual - 1, filaDestino, columnaDestino, visitado, camino)) {
                return true;
            }
            if (resolverLaberintoAux(laberinto, filaActual, columnaActual + 1, filaDestino, columnaDestino, visitado, camino)) {
                return true;
            }

            // Si no se encontró el destino desde la posición actual, retroceder
            camino.remove(camino.size() - 1);
        }

        return false;  // Si no se encontró el destino, retornar false
    }


    static int[][] convertirMapaACeldas(String[] mapa) {
        int filas = mapa.length;
        int columnas = mapa[0].length();
        int[][] celdas = new int[filas][columnas];
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                celdas[i][j] = mapa[i].charAt(j) == '.' ? 0 : 1;
            }
        }
        return celdas;
    }

    private static void inicializarMundo(String[] mundo) {

        viewPort = 7;
        alcanceVision = viewPort / 2;

        minFila = 0 + viewPort;
        minColumna = 0 + viewPort;
        maxFila = mundo.length - (viewPort + 1);
        maxColumna = mundo[0].length() - (viewPort + 1);
    }

    static void actualizarTiempo() {

        hora = hora + 0.2;
        if (hora >= 24) {
            hora = 0;
        }
        calculaAlcanceVision();
    }

    static void calculaAlcanceVision() {

        alcanceVision = viewPort * 2;

        if (hora < 1 || hora > 23) {
            alcanceVision = 1;
        } else if (hora < 3 || hora > 21) {
            alcanceVision = alcanceVision / 5;
        } else if (hora < 4 || hora > 20) {
            alcanceVision = alcanceVision / 5 * 2;
        } else if (hora < 5 || hora > 19) {
            alcanceVision = alcanceVision / 5 * 3;
        } else if (hora < 6 || hora > 18) {
            alcanceVision = alcanceVision / 5 * 4;
        }
    }

    static void imprimirMundo(String[] castillo, int[] personaje) {

        String elemento;
        limpiarPantalla();
        imprimirElCielo();
        for (int fila = personaje[FILA] - viewPort; fila <= personaje[FILA] + viewPort; fila++) {
            for (int columna = personaje[COLUMNA] - viewPort; columna <= personaje[COLUMNA] + viewPort; columna++) {

                elemento = mapear('P', modoVisualizacion);
                if (!(fila == personaje[FILA] && columna == personaje[COLUMNA])) {
                    elemento = mapear(castillo[fila].charAt(columna), modoVisualizacion);
                }

                if (!(Math.pow((fila - personaje[FILA]), 2) + Math.pow((columna - personaje[COLUMNA]), 2) <= alcanceVision * alcanceVision)) {
                    elemento = mapear('D', modoVisualizacion);
                }
                System.out.print(elemento);
            }
            System.out.println();
        }
        imprimirStatus(personaje);
    }

    private static void imprimirStatus(int[] personaje) {

        imprimirLinea();
        System.out.print("HORA: [" + (int) hora + "] ");
        System.out.print("/ (" + personaje[FILA] + "," + personaje[COLUMNA] + ")");
        System.out.println(" / SKIN[" + modoVisualizacion + "]");
        imprimirLinea();
    }

    static void imprimirLinea() {

        System.out.println(mapear('B', modoVisualizacion).repeat(viewPort * 2 + 1));
    }

    static String mapear(char elemento, int modoVisualizacion) {

        switch (modoVisualizacion) {
            case VISUALIZACION_NORMAL:
                return mapearNormal(elemento);
            case VISUALIZACION_SIN_COLOR:
                return mapearSinColor(elemento);
            case VISUALIZACION_RAW:
                return mapearRaw(elemento);
            case VISUALIZACION_COLISIONES:
                return tipoTerreno(elemento);
        }
        return "";
    }

    private static String mapearRaw(char elemento) {

        HashMap<String, String> tiles = new HashMap<>();

        tiles.put(" ", " ");
        tiles.put(".", ".");
        tiles.put("-", "-");
        tiles.put("=", "=");
        tiles.put("|", "|");
        tiles.put(":", ":");
        tiles.put("+", "+");
        tiles.put("O", "O");
        tiles.put("#", "#");
        tiles.put("*", "*");
        tiles.put("$", "$");
        tiles.put("X", "X");
        tiles.put("%", "%");
        tiles.put("_", "_");
        tiles.put("~", "~");
        tiles.put("B", "B");
        tiles.put("P", "P");
        tiles.put("D", "D");
        tiles.put("S", "S");
        tiles.put("C", "C");

        return tiles.get("" + elemento);
    }

    static String mapearSinColor(char elemento) {

        HashMap<String, String> tiles = new HashMap<>();

        tiles.put(" ", " ~~ ");
        tiles.put(".", " . .");
        tiles.put("-", "[##]");
        tiles.put("=", "||||");
        tiles.put("|", "[##]");
        tiles.put(":", "oO*o");
        tiles.put("+", "..:.");
        tiles.put("O", "[  ]");
        tiles.put("#", "::::");
        tiles.put("*", "    ");
        tiles.put("$", "$$$$");
        tiles.put("X", "||||");
        tiles.put("%", "%%%%");
        tiles.put("_", "____");
        tiles.put("~", " ~ ~");
        tiles.put("B", "====");
        tiles.put("P", "_()_");
        tiles.put("D", "    ");
        tiles.put("S", " () ");
        tiles.put("C", "    ");

        return tiles.get("" + elemento);
    }

    static String mapearNormal(char elemento) {

        HashMap<String, String> tiles = new HashMap<>();

        tiles.put(" ", BLUE_BOLD_BRIGHT + BLUE_BACKGROUND_BRIGHT + " ~~ " + RESET);
        tiles.put(".", YELLOW_BRIGHT + GREEN_BACKGROUND + " . ." + RESET);
        tiles.put("-", WHITE + WHITE_BACKGROUND + "[##]" + RESET);
        tiles.put("=", BLACK_BACKGROUND_BRIGHT + "||||" + RESET);
        tiles.put("|", WHITE + WHITE_BACKGROUND + "[##]" + RESET);
        tiles.put(":", YELLOW_BRIGHT + GREEN_BACKGROUND + "oO*o" + RESET);
        tiles.put("+", GREEN_BOLD + YELLOW_BACKGROUND + "..:." + RESET);
        tiles.put("O", WHITE_BACKGROUND_BRIGHT + "[  ]" + RESET);
        tiles.put("#", BLACK + RED_BACKGROUND + "::::" + RESET);
        tiles.put("*", YELLOW + YELLOW_BACKGROUND + "    " + RESET);
        tiles.put("$", RED_BRIGHT + YELLOW_BACKGROUND + "$$$$" + RESET);
        tiles.put("X", RED_UNDERLINED + YELLOW_BACKGROUND + "||||" + RESET);
        tiles.put("%", GREEN_BOLD + YELLOW_BACKGROUND + "%%%%" + RESET);
        tiles.put("_", BLACK + "____" + RESET);
        tiles.put("~", BLUE_BACKGROUND_BRIGHT + " ~ ~" + RESET);
        tiles.put("B", BLUE + BLUE_BACKGROUND + "====" + RESET);
        tiles.put("P", RED + "_()_" + RESET);
        tiles.put("D", BLACK_BACKGROUND_BRIGHT + "    " + RESET);
        tiles.put("S", YELLOW_BOLD_BRIGHT + BLUE_BACKGROUND + " () " + RESET);
        tiles.put("C", BLUE_BACKGROUND + "    " + RESET);

        return tiles.get("" + elemento);
    }

    static String tipoTerreno(char elemento) {

        HashMap<String, String> tiles = new HashMap<>();

        tiles.put(" ", "1");
        tiles.put(".", "0");
        tiles.put("-", "1");
        tiles.put("=", "0");
        tiles.put("|", "1");
        tiles.put(":", "0");
        tiles.put("+", "0");
        tiles.put("O", "0");
        tiles.put("#", "0");
        tiles.put("*", "0");
        tiles.put("$", "0");
        tiles.put("X", "0");
        tiles.put("%", "0");
        tiles.put("_", "0");
        tiles.put("~", "1");
        tiles.put("B", "0");
        tiles.put("P", "*");
        tiles.put("D", "0");
        tiles.put("S", "0");
        tiles.put("C", "0");

        return tiles.get("" + elemento);
    }

    static void mover(int[] unPersonaje, int direccion, String[] mapa) {

        int oldFila = unPersonaje[FILA];
        int oldColumna = unPersonaje[COLUMNA];

        unPersonaje[FILA] += MOVIMIENTO[direccion][FILA];
        unPersonaje[COLUMNA] += MOVIMIENTO[direccion][COLUMNA];

        if (!tipoTerreno(mapa[unPersonaje[FILA]].charAt(unPersonaje[COLUMNA])).equals("0")) {
            unPersonaje[FILA] = oldFila;
            unPersonaje[COLUMNA] = oldColumna;
        }

        if (unPersonaje[FILA] < minFila) {
            unPersonaje[FILA] = unPersonaje[FILA] + 1;
        }
        if (unPersonaje[FILA] > maxFila) {
            unPersonaje[FILA] = unPersonaje[FILA] - 1;
        }
        if (unPersonaje[COLUMNA] < minColumna) {
            unPersonaje[COLUMNA] = unPersonaje[COLUMNA] + 1;
        }
        if (unPersonaje[COLUMNA] > maxColumna) {
            unPersonaje[COLUMNA] = unPersonaje[COLUMNA] - 1;
        }
    }

    static void moverPersonajeAutomaticamente(List<int[]> camino, String[] mapa) {
        // Obtener las coordenadas iniciales del personaje del primer elemento del camino
        int filaPersonaje = camino.get(0)[0];
        int columnaPersonaje = camino.get(0)[1];

        for (int i = 1; i < camino.size(); i++) {
            int filaDestino = camino.get(i)[0];
            int columnaDestino = camino.get(i)[1];
            mover(new int[]{filaPersonaje, columnaPersonaje}, calcularDireccion(filaPersonaje, columnaPersonaje, filaDestino, columnaDestino), mapa);
            filaPersonaje = filaDestino; // Actualizar las coordenadas del personaje
            columnaPersonaje = columnaDestino;
            // Agrega un retraso para visualizar mejor el movimiento en la terminal
            try {
                Thread.sleep(500); // Retraso de medio segundo (ajusta según necesites)
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    static int calcularDireccion(int filaActual, int columnaActual, int filaDestino, int columnaDestino) {
        if (filaDestino < filaActual) {
            return ARRIBA;
        } else if (filaDestino > filaActual) {
            return ABAJO;
        } else if (columnaDestino < columnaActual) {
            return IZQUIERDA;
        } else if (columnaDestino > columnaActual) {
            return DERECHA;
        } else {
            // Si estamos ya en la posición destino, simplemente retornamos una dirección válida
            return DERECHA; // Cualquier dirección
        }
    }

    static void resolverAutomaticamente() {
        // Laberinto (asume que ya está definido)


        // Coordenadas de inicio y destino
        int filaInicio = 31;
        int columnaInicio = 33;
        int filaDestino = 39;

        int columnaDestino = 70;

        // Resolver laberinto y obtener el camino
        List<int[]> camino = resolverLaberinto(convertirMapaACeldas(castilloLB), filaInicio, columnaInicio, filaDestino, columnaDestino);

        // Imprimir el camino encontrado o un mensaje si no se encontró
        if (camino != null) {
            System.out.println("Se encontró un camino hacia el destino:");
            for (int[] posicion : camino) {
                System.out.println("(" + posicion[0] + ", " + posicion[1] + ")");
            }
        } else {
            System.out.println("No se encontró un camino hacia el destino.");
        }
    }

    static void iniciarMovimientoAutomatico(String[] mapa) {
        // Inicializar el laberinto y obtener el camino hacia el destino
        int[][] laberinto = convertirMapaACeldas(castilloLB);
        int filaInicio = 0;
        int columnaInicio = 0;
        int filaDestino = 39;
        int columnaDestino = 70;
        List<int[]> camino = resolverLaberinto(laberinto, filaInicio, columnaInicio, filaDestino, columnaDestino);

        if (camino != null) {
            // Comenzar el movimiento automático del personaje
            moverPersonajeAutomaticamente(camino, mapa);
        } else {
            System.out.println("No se encontró un camino hacia el destino.");
        }
    }


    static void verAccion(int[] elPersonaje, String[] elMundo) {

        switch (capturarMovimiento()) {
            case ARRIBA:
                mover(elPersonaje, ARRIBA, elMundo);
                break;
            case ABAJO:
                mover(elPersonaje, ABAJO, elMundo);
                break;
            case IZQUIERDA:
                mover(elPersonaje, IZQUIERDA, elMundo);
                break;
            case DERECHA:
                mover(elPersonaje, DERECHA, elMundo);
                break;
            case SALIR:
                jugando = !jugando;
                break;
            case CAMBIA_VISUALIZACION:
                cambiaVisualizacion();
                break;
            case AUTORESOLUCUION:
                inicializarMundo(castilloLB);
                break;
            case NADA:
                break;
        }
    }

    static void cambiaVisualizacion() {
        modoVisualizacion++;
        if (modoVisualizacion > 3) {
            modoVisualizacion = 0;
        }
    }

    static int capturarMovimiento() {

        switch (pedirChar()) {
            case 's', 'S', '8':
                return ABAJO;
            case 'w', 'W', '2':
                return ARRIBA;
            case 'a', 'A', '4':
                return IZQUIERDA;
            case 'd', 'D', '6':
                return DERECHA;
            case 'f', 'F':
                return SALIR;
            case 'v', 'V':
                return CAMBIA_VISUALIZACION;
            case 'q', 'Q', '9':
                return AUTORESOLUCUION;

        }
        return NADA;
    }

    static char pedirChar() {

        Scanner entrada = new Scanner(System.in);
        String inputUsuario = entrada.nextLine() + "x"; // Este es un caso que justifica un comentario!
        return inputUsuario.charAt(0); // Lo comentamos en clase ;)
    }

    static void limpiarPantalla() {

        System.out.print("\033[H\033[2J");
        System.out.flush();
    }

    static void imprimirElCielo() {

        imprimirLinea();
        for (int i = 0; i < viewPort * 2 + 1; i = i + 1) {
            if ((hora > 6) && (hora <= 18) && (i == (int) (((viewPort * 2)) - ((hora - 7) * (viewPort * 2) / 12)))) {
                System.out.print(mapear('S', modoVisualizacion));
            } else {
                System.out.print(mapear('C', modoVisualizacion));
            }
        }
        System.out.println();
        imprimirLinea();
    }

    public static final String RESET = "\033[0m";

    public static final String BLACK = "\033[0;30m";
    public static final String RED = "\033[0;31m";
    public static final String GREEN = "\033[0;32m";
    public static final String YELLOW = "\033[0;33m";
    public static final String BLUE = "\033[0;34m";
    public static final String PURPLE = "\033[0;35m";
    public static final String CYAN = "\033[0;36m";
    public static final String WHITE = "\033[0;37m";

    public static final String BLACK_BOLD = "\033[1;30m";
    public static final String RED_BOLD = "\033[1;31m";
    public static final String GREEN_BOLD = "\033[1;32m";
    public static final String YELLOW_BOLD = "\033[1;33m";
    public static final String BLUE_BOLD = "\033[1;34m";
    public static final String PURPLE_BOLD = "\033[1;35m";
    public static final String CYAN_BOLD = "\033[1;36m";
    public static final String WHITE_BOLD = "\033[1;37m";

    public static final String BLACK_UNDERLINED = "\033[4;30m";
    public static final String RED_UNDERLINED = "\033[4;31m";
    public static final String GREEN_UNDERLINED = "\033[4;32m";
    public static final String YELLOW_UNDERLINED = "\033[4;33m";
    public static final String BLUE_UNDERLINED = "\033[4;34m";
    public static final String PURPLE_UNDERLINED = "\033[4;35m";
    public static final String CYAN_UNDERLINED = "\033[4;36m";
    public static final String WHITE_UNDERLINED = "\033[4;37m";

    public static final String BLACK_BACKGROUND = "\033[40m";
    public static final String RED_BACKGROUND = "\033[41m";
    public static final String GREEN_BACKGROUND = "\033[42m";
    public static final String YELLOW_BACKGROUND = "\033[43m";
    public static final String BLUE_BACKGROUND = "\033[44m";
    public static final String PURPLE_BACKGROUND = "\033[45m";
    public static final String CYAN_BACKGROUND = "\033[46m";
    public static final String WHITE_BACKGROUND = "\033[47m";

    public static final String BLACK_BRIGHT = "\033[0;90m";
    public static final String RED_BRIGHT = "\033[0;91m";
    public static final String GREEN_BRIGHT = "\033[0;92m";
    public static final String YELLOW_BRIGHT = "\033[0;93m";
    public static final String BLUE_BRIGHT = "\033[0;94m";
    public static final String PURPLE_BRIGHT = "\033[0;95m";
    public static final String CYAN_BRIGHT = "\033[0;96m";
    public static final String WHITE_BRIGHT = "\033[0;97m";

    public static final String BLACK_BOLD_BRIGHT = "\033[1;90m";
    public static final String RED_BOLD_BRIGHT = "\033[1;91m";
    public static final String GREEN_BOLD_BRIGHT = "\033[1;92m";
    public static final String YELLOW_BOLD_BRIGHT = "\033[1;93m";
    public static final String BLUE_BOLD_BRIGHT = "\033[1;94m";
    public static final String PURPLE_BOLD_BRIGHT = "\033[1;95m";
    public static final String CYAN_BOLD_BRIGHT = "\033[1;96m";
    public static final String WHITE_BOLD_BRIGHT = "\033[1;97m";

    public static final String BLACK_BACKGROUND_BRIGHT = "\033[0;100m";
    public static final String RED_BACKGROUND_BRIGHT = "\033[0;101m";
    public static final String GREEN_BACKGROUND_BRIGHT = "\033[0;102m";
    public static final String YELLOW_BACKGROUND_BRIGHT = "\033[0;103m";
    public static final String BLUE_BACKGROUND_BRIGHT = "\033[0;104m";
    public static final String PURPLE_BACKGROUND_BRIGHT = "\033[0;105m";
    public static final String CYAN_BACKGROUND_BRIGHT = "\033[0;106m";
    public static final String WHITE_BACKGROUND_BRIGHT = "\033[0;107m";
}